use crate::bspline::spline_geo::SplineGeo;
use crate::diffgeo::chart::Chart;
use crate::index::dimensioned::Dimensioned;
use crate::mesh::knot_mesh::{CartesianWithIncrements, KnotMesh, MultiKnotVec};
use crate::mesh::vertex_storage::VertexStorage;
use crate::mesh::Mesh;
use nalgebra::{Const, OPoint, RealField};
use std::iter::Once;

/// [`MultiKnotVec`] mapped to the physical domain by a B-Spline parametrization.
#[derive(Debug, Clone)]
pub struct BsplineKnotVec<'a, T: RealField, const D: usize, const M: usize> {
    /// Knot vectors in the parametric domain.
    pub parametric_knots: MultiKnotVec<T, D>,

    /// Spline parametrization mapping the reference mesh to the physical Bezier mesh.
    pub geo_map: SplineGeo<'a, T, D, M> // todo: update this type
}

impl<'a, T: RealField + Copy, const D: usize, const M: usize> VertexStorage<T> for BsplineKnotVec<'a, T, D, M> {
    type GeoDim = Const<M>;
    type NodeIdx = [usize; D];
    type NodeIter = Once<[usize; D]>;

    fn len(&self) -> usize {
        self.parametric_knots.len()
    }

    fn is_empty(&self) -> bool {
        self.parametric_knots.is_empty()
    }

    fn node_iter(&self) -> Self::NodeIter {
        self.parametric_knots.node_iter()
    }

    fn vertex(&self, i: Self::NodeIdx) -> OPoint<T, Self::GeoDim> {
        self.geo_map.eval(self.parametric_knots.vertex(i).into_arr())
    }
}

/// A Bezier mesh embedded in [`M`]-dimensional Euclidean space.
///
/// It is generated by a NURBS or B-Spline map of the [`D`]-dimensional parametric [KnotMesh].
/// An exemplar mapping can in 2D be schematically visualized as
/// ```text
/// ^ v                           +--+----
/// |    +---+---+---+            |   ⟍    ⟍
/// |    |   |   |   |            |    / +---+
/// |    +---+---+---+       F    +----+   ⟍    ⟍
/// |    |   |   |   |     ====>  |   /  ⟍   ⟍    ⟍
/// |    +---+---+---+            +--+     +--+-----+
/// |    |   |   |   |                 ⟍ ⟋ ⟍   ⟍   |
/// |    +---+---+---+                   |   |   |   |
/// |                 u                  +---+---+---+
/// +------------------>
/// ```
/// where `F` is the geometrical mapping.
pub type BezierMesh<'a, T, const D: usize, const M: usize> = Mesh<T, BsplineKnotVec<'a, T, D, M>, CartesianWithIncrements<D>>;

impl <'a, T: RealField + Copy, const D: usize, const M: usize> BezierMesh<'a, T, D, M> {
    /// Constructs a new [`BezierMesh`] from the given `parametric_mesh` and `geo_map`.
    pub fn new(parametric_mesh: KnotMesh<T, D>, geo_map: SplineGeo<'a, T, D, M>) -> Self {
        let knots = BsplineKnotVec { parametric_knots: parametric_mesh.coords, geo_map };
        Mesh::with_coords_and_cells(knots, parametric_mesh.cells)
    }
}
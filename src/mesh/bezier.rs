use nalgebra::{Dyn, RealField};
use crate::bspline::de_boor::DeBoorMulti;
use crate::bspline::spline_geo::SplineGeo;
use crate::mesh::cartesian::CartMesh;

/// A Bezier mesh embedded in [`M`]-dimensional Euclidean space.
/// Generated by a NURBS or B-Spline map of the [`D`]-dimensional parametric cartesian mesh.
/// An exemplar mapping can in 2D be schematically visualized as
/// ```text
/// ^ v                           +--+----
/// |    +---+---+---+            |   ⟍    ⟍
/// |    |   |   |   |            |    / +---+
/// |    +---+---+---+       F    +----+   ⟍    ⟍
/// |    |   |   |   |     ====>  |   /  ⟍   ⟍    ⟍
/// |    +---+---+---+            +--+     +--+-----+
/// |    |   |   |   |                 ⟍ ⟋ ⟍   ⟍   |
/// |    +---+---+---+                   |   |   |   |
/// |                 u                  +---+---+---+
/// +------------------>
/// ```
/// where `F` is the geometrical mapping.
pub struct BezierMesh<'a, T: RealField + Copy, const D: usize, const M: usize> {
    /// The cartesian mesh of the parametric domain.
    pub ref_mesh: CartMesh<T, D>,
    
    // todo:
    //  1. allow for different geo maps. Especially Nurbs maps
    //  2. don't require DeBoorMulti. For that, possibly encode D in BsplineBasis trait
    /// Spline parametrization mapping the reference mesh to the physical Bezier mesh.
    pub geo_map: SplineGeo<'a, T, [T; D], DeBoorMulti<T, D>, M, Dyn>
}
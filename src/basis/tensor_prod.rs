use crate::basis::local::LocalBasis;
use crate::basis::traits::{Basis, HgradBasis, NumBasis};
use crate::index::dimensioned::{DimShape, Strides};
use crate::index::multi_index::MultiIndex;
use itertools::Itertools;
use nalgebra::{Const, Dyn, Matrix, OMatrix, RealField, RowDVector, U1};
use std::iter::zip;
use std::marker::PhantomData;

/// A multivariate basis generated by tensor products of (univariate) scalar bases.
/// Given a family `{B[i]}ᵢ` of [`D`] bases with `B[i] = {b₁,...,bₙ}`,
/// the tensor product basis functions are defined as
/// ```text
/// bᵢ: X×...×X ⟶ ℝ   x ↦ bᵢ[1](x[1]) ... bᵢ[d](x[d])
/// ```
#[derive(Debug, Clone, Copy)]
pub struct MultiProd<T: RealField, B, const D: usize> {
    /// The bases for each parametric direction.
    pub bases: [B; D],

    _phantom_data: PhantomData<T>,
}

impl<T: RealField, B, const D: usize> MultiProd<T, B, D> {
    /// Constructs a new [`MultiProd`] from the given array `bases` of `D` univariate bases.
    pub fn new(bases: [B; D]) -> Self {
        MultiProd { bases, _phantom_data: Default::default() }
    }
}

impl<T: RealField, B: Clone, const D: usize> MultiProd<T, B, D> {
    /// Constructs a new [`MultiProd`] using the given `basis` for every parametric direction.
    pub fn repeat(basis: B) -> Self {
        Self::new(std::array::from_fn(|_| basis.clone()))
    }
}

// todo: implement shape and strides for GlobalBasis as well, be using super-trait GlobalBasis: Basis

impl<T: RealField, B: NumBasis, const D: usize> MultiProd<T, B, D> {
    /// Returns the number of basis functions per parametric direction as a [`DimShape`].
    pub fn shape(&self) -> DimShape<D> {
        let arr = self.bases.iter()
            .map(|base| base.num_basis())
            .collect_array();
        DimShape(arr.unwrap())
    }

    /// Returns the [`Strides`] for the basis functions.
    pub fn strides(&self) -> Strides<D> {
        Strides::from(self.shape())
    }
}

impl<T: RealField, B: Basis<T, T, NumComponents = U1, NumBasis = Dyn>, const D: usize> MultiProd<T, B, D> {
    /// Computes the evaluated tensor product basis using [`Matrix::kronecker`],
    /// given an iterator `b` of univariate basis functions for each parametric direction.
    fn compute_multi_prod(&self, b: impl Iterator<Item = RowDVector<T>>) -> RowDVector<T> {
        b.reduce(|acc, bi| acc.kronecker(&bi))
            .expect("Dimension D must be greater than 0!")
    }
}

impl<T: RealField, B: HgradBasis<T, T, 1, NumBasis = Dyn>, const D: usize> MultiProd<T, B, D> {
    // todo: move this to separate trait or Hgrad trait
    /// Evaluates the partial derivatives of all basis functions with respect to the `i`-th direction
    /// at the parametric point `x` as the column-wise vector `(b[1],...,b[i]/dx[i]...,b[n])`.
    fn eval_partial_deriv(&self, x: [T; D], i: usize) -> RowDVector<T> {
        let b = zip(&self.bases, x)
            .enumerate()
            .map(|(j, (b, xi))| {
                if j == i {
                    b.eval_grad(xi) // in 1D this is just the normal derivative
                } else {
                    b.eval(xi)
                }
            });

        self.compute_multi_prod(b)
    }
}

impl<T: RealField, B: NumBasis, const D: usize> NumBasis for MultiProd<T, B, D> {
    fn num_basis(&self) -> usize {
        self.shape().len()
    }
}

impl<T: RealField, B: Basis<T, T, NumComponents = U1, NumBasis = Dyn>, const D: usize> Basis<T, [T; D]> for MultiProd<T, B, D> {
    type NumBasis = Dyn;
    type NumComponents = U1;

    fn eval(&self, x: [T; D]) -> OMatrix<T, Const<1>, Dyn> {
        let b = zip(&self.bases, x).map(|(b, xi)| b.eval(xi));
        self.compute_multi_prod(b)
    }
}

impl<T: RealField + Copy, B: HgradBasis<T, T, 1, NumBasis = Dyn>, const D: usize> HgradBasis<T, [T; D], D> for MultiProd<T, B, D> {
    fn eval_grad(&self, x: [T; D]) -> OMatrix<T, Const<D>, Dyn> {
        let partial_derivs = (0..D).map(|i| self.eval_partial_deriv(x, i)).collect_vec();
        Matrix::from_rows(&partial_derivs)
    }
}

// todo: also implement DiffBasis and HgradBasis

impl<T, BElem, B, const D: usize> LocalBasis<T, [T; D]> for MultiProd<T, B, D>
    where T: RealField + Copy,
          BElem: Basis<T, T, NumComponents = U1, NumBasis = Dyn>, // todo: NumBasis = Dyn is not generic enough!
          B: LocalBasis<T, T, ElemBasis=BElem, NumComponents = U1, NumBasis = Dyn>,
          // DefaultAllocator: Allocator<<B::ElemBasis as Basis<T, T>>::NumComponents, <B::ElemBasis as Basis<T, T>>::NumBasis>
{
    type Elem = [B::Elem; D]; // todo: possibly change to MultiProd<B::Elem>
    type ElemBasis = MultiProd<T, B::ElemBasis, D>;
    type GlobalIndices = impl Iterator<Item = usize> + Clone;

    fn find_elem(&self, x: [T; D]) -> Self::Elem {
        zip(&self.bases, x)
            .map( |(bi, xi)| bi.find_elem(xi))
            .collect_array().unwrap()
    }

    // todo: update this implementation by making HyperRectangle actually a MultiProd<Interval>
    fn elem_basis(&self, elem: &Self::Elem) -> Self::ElemBasis {
        let bases = zip(&self.bases, elem)
            .map(|(b, interval)| b.elem_basis(interval))
            .collect_array().unwrap();
        MultiProd::new(bases)
    }

    fn global_indices(&self, local_basis: &Self::ElemBasis) -> Self::GlobalIndices {
        let strides = self.strides();
        zip(&self.bases, &local_basis.bases)
            .map(|(b, b_local)| b.global_indices(b_local))
            .multi_cartesian_product()
            .map(|i| TryInto::<[usize; D]>::try_into(i).unwrap())
            .map(move |i| i.into_lin(&strides))
    }
}
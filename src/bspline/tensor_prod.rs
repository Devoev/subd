use crate::bspline::basis::BsplineBasis;
use crate::index::dimensioned::{DimShape, Strides};
use crate::index::multi_index::MultiIndex;
use itertools::Itertools;
use nalgebra::{DVector, RealField};
use std::iter::zip;
use std::marker::PhantomData;

/// A [`BsplineBasis`] generated by tensor products of (univariate) bases.
/// Given a family `{B[i]}ᵢ` of [`D`] bases with `B[i] = {b₁,...,bₙ}`,
/// the tensor product basis functions are defined as
/// ```text
/// bᵢ: X×...×X ⟶ ℝ   x ↦ bᵢ[1](x[1]) ... bᵢ[d](x[d])
/// ```
pub struct MultiProd<T: RealField, X, B: BsplineBasis<T, X>, const D: usize> {
    /// The bases for each parametric direction.
    bases: [B; D],

    phantom_data: PhantomData<(T, X)>,
}

impl<T: RealField, X, B: BsplineBasis<T, X>, const D: usize> MultiProd<T, X, B, D> {
    /// Constructs a new [`MultiProd`] from the given array `bases` of `D` univariate bases.
    pub fn new(bases: [B; D]) -> Self {
        MultiProd { bases, phantom_data: Default::default() }
    }

    /// Returns the number of basis functions per parametric direction as a [`DimShape`].
    pub fn num_basis(&self) -> DimShape<D> {
        let arr = self.bases.iter()
            .map(|base| base.len())
            .collect_array();
        DimShape(arr.unwrap())
    }

    /// Returns the [`Strides`] for the basis functions.
    pub fn strides(&self) -> Strides<D> {
        Strides::from(self.num_basis())
    }
}

impl <T: RealField, X, B: BsplineBasis<T, X>, const D: usize> BsplineBasis<T, [X; D]> for MultiProd<T, X, B, D>
    where B::NonzeroIndices: Clone
{
    type NonzeroIndices = impl Iterator<Item = usize>;

    fn len(&self) -> usize {
        self.num_basis().len()
    }

    fn eval_nonzero(&self, x: [X; D]) -> (DVector<T>, Self::NonzeroIndices) {
        let (b, idx): (Vec<_>, Vec<_>) = zip(&self.bases, x)
            .map(|(space, xi)| space.eval_nonzero(xi))
            .unzip();

        let b = b.into_iter()
            .reduce(|acc, bi| acc.kronecker(&bi))
            .expect("Dimension D must be greater than 0!");

        let strides = self.strides();
        let idx = idx.into_iter()
            .multi_cartesian_product()
            .map(|i| TryInto::<[usize; D]>::try_into(i).unwrap())
            .map(move |i| i.into_lin(strides));

        (b, idx)
    }
}